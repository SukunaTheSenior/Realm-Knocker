#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <ctime>

// Rock class
class Rock {
public:
    sf::RectangleShape shape;
    sf::Vector2f velocity;

    Rock(sf::Vector2f position, sf::Vector2f direction) {
        shape.setSize(sf::Vector2f(10.f, 10.f));
        shape.setFillColor(sf::Color::Brown);
        shape.setPosition(position);
        velocity = direction * 5.f;
    }

    void update() {
        shape.move(velocity);
    }
};

// Player class
class Player {
public:
    sf::RectangleShape shape;
    sf::Vector2f position;
    float teleportRadius = 50.f;
    int rockCooldown = 0;
    int teleportCooldown = 0;

    Player() {
        shape.setSize(sf::Vector2f(20.f, 20.f));
        shape.setFillColor(sf::Color::Green);
        position = sf::Vector2f(400.f, 300.f);
        shape.setPosition(position);
    }

    void move(sf::Vector2f direction) {
        position += direction;
        shape.setPosition(position);
    }

    void teleport() {
        float angle = static_cast<float>(rand()) / static_cast<float>(RAND_MAX) * 2.f * 3.14159f;
        position.x += std::cos(angle) * teleportRadius;
        position.y += std::sin(angle) * teleportRadius;
        shape.setPosition(position);
    }

    void updateCooldowns() {
        if (rockCooldown > 0) rockCooldown--;
        if (teleportCooldown > 0) teleportCooldown--;
    }
};

int main() {
    srand(static_cast<unsigned>(time(0)));

    sf::RenderWindow window(sf::VideoMode(800, 600), "Realm Knocker RGB");
    window.setFramerateLimit(60);

    Player player;
    std::vector<Rock> rocks;

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Player Movement (WASD)
        sf::Vector2f movement(0.f, 0.f);
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) movement.y -= 1.f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) movement.y += 1.f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) movement.x -= 1.f;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) movement.x += 1.f;
        player.move(movement * 5.f);

        // Rock Throw (Q Key)
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Q) && player.rockCooldown <= 0) {
            rocks.emplace_back(player.position, sf::Vector2f(-0.5f, -1.f)); // Left-up
            rocks.emplace_back(player.position, sf::Vector2f(0.f, -1.f));   // Straight-up
            rocks.emplace_back(player.position, sf::Vector2f(0.5f, -1.f));  // Right-up
            player.rockCooldown = 60; // 1 second cooldown (60 frames)
        }

        // Teleport Jump (E Key)
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::E) && player.teleportCooldown <= 0) {
            player.teleport();
            player.teleportCooldown = 180; // 3 second cooldown (180 frames)
        }

        // Update rocks
        for (auto& rock : rocks) {
            rock.update();
        }

        // Remove off-screen rocks
        rocks.erase(std::remove_if(rocks.begin(), rocks.end(), [](const Rock& rock) {
            return rock.shape.getPosition().x < 0 || rock.shape.getPosition().x > 800 ||
                   rock.shape.getPosition().y < 0 || rock.shape.getPosition().y > 600;
        }), rocks.end());

        // Update cooldowns
        player.updateCooldowns();

        // Rendering
        window.clear();
        window.draw(player.shape);
        for (const auto& rock : rocks) {
            window.draw(rock.shape);
        }
        window.display();
    }

    return 0;
}